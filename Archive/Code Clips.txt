   ---------------------------
   --  VECTOR3D OPERATIONS  --
   ---------------------------

   function GetX (Vec : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to return the X-coordinate of a Vector3D</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function GetY (Vec : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to return the Y-coordinate of a Vector3D</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function GetZ (Vec : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to return the Z-coordinate of a Vector3D</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "+" (Left, Right : in Vector3D) return Vector3D;
   --  <summary>function to add two Vector3D variables.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "-" (Left, Right : in Vector3D) return Vector3D;
   --  <summary>function to substract two Vector3D variables.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "-" (Vec : in Vector3D) return Vector3D;
   --  <summary>function to negate a Vector3D variable.
   --  It returns a Vector3D</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in Vector3D; Right : LARGE_FLOAT) return Vector3D;
   --  <summary>function to multiply a Vector3D variable with a LARGE_FLOAT.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A LARGE_FLOAT</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in LARGE_FLOAT; Right : Vector3D) return Vector3D;
   --  <summary>function to multiply a Vector3D variable with a LARGE_FLOAT.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A LARGE_FLOAT</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "/" (Left : in Vector3D; Right : LARGE_FLOAT) return Vector3D;
   --  <summary>function to divide a Vector3D variable with a LARGE_FLOAT.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A LARGE_FLOAT</parameter>
   --  <exception>No exception</exception>

   function "*" (Left, Right : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to calculate the dot product of two Vector3D variables.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "**" (Left, Right : in Vector3D) return Vector3D;
   --  <summary>function to calculate the cross product of two Vector3D variables.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function Length (Vec : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to calculate the length of a Vector3D variable.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function Length_Squared (Vec : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to calculate the squared length of a Vector3D variable.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function Normalize (Vec : in Vector3D) return Vector3D;
   --  <summary>function to normalize a Vector3D variable.
   --  It returns a Vector3D</summary>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Mat : in Matrix3D; Vec : in Vector3D) return Vector3D;
   --  <summary>function to transform a Vector3D with a Matrix3D. It is assumed that the Matrix3D
   --  has (0 0 0 1) as the bottom row for values. It returns a Vector3D</summary>
   --  <parameter name="Mat">A Matrix3D</parameter>
   --  <parameter name="Vec">A Vector3D</parameter>
   --  <exception>No exception</exception>

   --------------------------
   --  POINT3D OPERATIONS  --
   --------------------------

   function GetX (Pnt : in Point3D) return LARGE_FLOAT;
   --  <summary>function to return the X-coordinate of a Point3D</summary>
   --  <parameter name="Pnt">A Point3D</parameter>
   --  <exception>No exception</exception>

   function GetY (Pnt : in Point3D) return LARGE_FLOAT;
   --  <summary>function to return the Y-coordinate of a Point3D</summary>
   --  <parameter name="Pnt">A Point3D</parameter>
   --  <exception>No exception</exception>

   function GetZ (Pnt : in Point3D) return LARGE_FLOAT;
   --  <summary>function to return the Z-coordinate of a Point3D</summary>
   --  <parameter name="Pnt">A Point3D</parameter>
   --  <exception>No exception</exception>

   function "+" (Left : in Point3D; Right : in Vector3D) return Point3D;
   --  <summary>function to add a Vector3D to a Point3D.
   --  It implies a transform of a Point3D and returns a Point3D</summary>
   --  <parameter name="Left">A Point3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "-" (Left : in Point3D; Right : in Vector3D) return Point3D;
   --  <summary>function to substract a Vector3D from a Point3D.
   --  It implies a transform of a Point3D and returns a Point3D</summary>
   --  <parameter name="Left">A Point3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "-" (Left, Right : in Point3D) return Vector3D;
   --  <summary>function to substract two Point3D variables.
   --  It calculates the vector from Right to Left. It returns a Vector3D</summary>
   --  <parameter name="Left">A Point3D</parameter>
   --  <parameter name="Right">A Point3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in Point3D; Right : LARGE_FLOAT) return Point3D;
   --  <summary>function to multiply a Point3D variable with a LARGE_FLOAT.
   --  It returns a Point3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A LARGE_FLOAT</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in LARGE_FLOAT; Right : Point3D) return Point3D;
   --  <summary>function to multiply a Point3D variable with a LARGE_FLOAT.
   --  It returns a Point3D</summary>
   --  <parameter name="Left">A LARGE_FLOAT</parameter>
   --  <parameter name="Right">A Point3D</parameter>
   --  <exception>No exception</exception>

   function Distance (P1, P2 : in Point3D) return LARGE_FLOAT;
   --  <summary>function to calculate the distance between two Point3D variables,
   --  as in ||P1 - P2||. It returns a LARGE_FLOAT</summary>
   --  <parameter name="P1">A Point3D</parameter>
   --  <parameter name="P2">A Point3D</parameter>
   --  <exception>No exception</exception>

   function Distance_Squared (P1, P2 : in Point3D) return LARGE_FLOAT;
   --  <summary>function to calculate the squared distance between two Point3D variables,
   --  as in ||P1 - P2||^2.It returns a LARGE_FLOAT</summary>
   --  <parameter name="P1">A Point3D</parameter>
   --  <parameter name="P2">A Point3D</parameter>
   --  <exception>No exception</exception>

   function Distance_Org (P: in Point3D) return LARGE_FLOAT;
   --  <summary>function to calculate the distance between a Point3D and the Origin.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="P">A Point3D</parameter>
   --  <exception>No exception</exception>

   function Distance_Squared_Org (P: in Point3D) return LARGE_FLOAT;
   --  <summary>function to calculate the squared distance between a Point3D and the Origin.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="P">A Point3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Mat : in Matrix3D; Pnt : in Point3D) return Point3D;
   --  <summary>function to transform a Point3D with a Matrix3D. It is assumed that the Matrix3D
   --  has (0 0 0 1) as the bottom row for values. It returns a Point3D</summary>
   --  <parameter name="Mat">A Matrix3D</parameter>
   --  <parameter name="Pnt">A Point3D</parameter>
   --  <exception>No exception</exception>

   ---------------------------
   --  NORMAL3D OPERATIONS  --
   ---------------------------

   function "+" (Left, Right : in Normal3D) return Normal3D;
   --  <summary>function to add two Normal3D variables.
   --  It returns a Normal3D</summary>
   --  <parameter name="Left">A Normal3D</parameter>
   --  <parameter name="Right">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function "-" (Norm : in Normal3D) return Normal3D;
   --  <summary>function to negate a Normal3D variable.
   --  It returns a Vector3D</summary>
   --  <parameter name="Norm">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in Normal3D; Right : in LARGE_FLOAT) return Normal3D;
   --  <summary>function to multiply a Normal3D variable with a LARGE_FLOAT.
   --  It returns a Normal3D</summary>
   --  <parameter name="Left">A Normal3D</parameter>
   --  <parameter name="Right">A LARGE_FLOAT</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in LARGE_FLOAT; Right : in Normal3D) return Normal3D;
   --  <summary>function to multiply a Normal3D variable with a LARGE_FLOAT.
   --  It returns a Normal3D</summary>
   --  <parameter name="Left">A LARGE_FLOAT</parameter>
   --  <parameter name="Right">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function "+" (Left : in Normal3D; Right : in Vector3D) return Vector3D;
   --  <summary>function to add a Normal3D variable to a Vector3D.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Normal3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "+" (Left : in Vector3D; Right : in Normal3D) return Vector3D;
   --  <summary>function to add a Vector3D variable to a Normal3D.
   --  It returns a Vector3D</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in Normal3D; Right : in Vector3D) return LARGE_FLOAT;
   --  <summary>function to calculate the dot product of a Normal3D and a Vector3D.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="Left">A Normal3D</parameter>
   --  <parameter name="Right">A Vector3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Left : in Vector3D; Right : in Normal3D) return LARGE_FLOAT;
   --  <summary>function to calculate the dot product of a Vector3D and a Normal3D.
   --  It returns a LARGE_FLOAT</summary>
   --  <parameter name="Left">A Vector3D</parameter>
   --  <parameter name="Right">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function Normalize (Norm : in Normal3D) return Normal3D;
   --  <summary>function to normalize a Normal3D variable.
   --  It returns a Normal3D</summary>
   --  <parameter name="Norm">A Normal3D</parameter>
   --  <exception>No exception</exception>

   function "*" (Mat : in Matrix3D; Norm : in Normal3D) return Normal3D;
   --  <summary>function to transform a Normal3D with a Matrix3D. It is assumed that the Matrix3D
   --  has (0 0 0 1) as the bottom row for values. The Matrix3D is transposed in the calculation
   --  for the result. It returns a Normal3D</summary>
   --  <parameter name="Mat">A Matrix3D</parameter>
   --  <parameter name="Norm">A Normal3D</parameter>
   --  <exception>No exception</exception>