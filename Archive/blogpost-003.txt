OK, 2nd sprint is basically done...the goal of this sprint is to have a very simple set of functions in which I could open a window and plot a pixel in any RGB colour.
My requirements were very basic, as I do not want to "waste" time on a very fancy GUI. In fact, a ray tracer could write its result to an output file,
and could do withhout any GUI at all. But that has a major drawback...There is something magical about looking at a screen and seeing your picture appeaing pixel by pixel...
It also allows you to stop a long-running trace when early in the picture you discover a mistake or bug, and you obviously want to correct it without waiting for the final
pixelto be finished. 

Looking way into the future, I also wanted to allow for some multi-threading capabilities, and allow multiple pictures to be calculated in parallel. 
Hence the ray tracer should support multiple windows to be opened and painted to.

As an interface, I was looking for something very simple. Just opening a window, plot a poixel, and close the window. Obviously, any pixel needed to be stored in some kind of bitmap structure as well,
since you want to save the picture at a later stage. I decided to use a separate bitmap for the calculated pixels and not use the one used by the window system. 
This allows me to stay away from any dependancy issues with the operating system, and avoids any requirements on the windows event handling and refreshing. As I said, I don't want to dwell on the GUI too much...

All in all, I decided to use a protected object type in my Ada 2005 sources. I would like to reference the book "Programming in Ada 2005" by John Barnes. I took all the stuff I used from there...

For those interrested: This is the package specification of my Windows handler. It is based upon the X11ada library by Mitch Gart, with some modifications by Srini.

--  Package X11Windows
with X;
with X.Xlib;
with Interfaces.C;
with Ada.Text_IO;

--  This package provides some crude Windows plotting support, although not very sexy But it
--  suffices, I guess... It uses the X11 Ada bindings as per x11ada_v1.30

package X11Windows is

   --  This defined the maximum Windows resolution that is supported Not used anywhere at this
   --  time...
   MAX_XSIZE : constant Integer := 1280;
   MAX_YSIZE : constant Integer := 1024;

   --  FrameBuffer type must be defined here as a generic array because it needs to be defined prior
   --  to the protected type
   type FrameBuffer is
     array (Interfaces.C.unsigned range <>,
            Interfaces.C.unsigned range <>)
            of Interfaces.C.unsigned_long;

   --  X11Window is a protected type, taking the window XSIZE and YSIZE as parameters. Note that the
   --  PixelMap is therefore indexed from 1..XSize, 1..YSize, while the actual X11 coordinates will
   --  range from 0..XSize-1, 0..YSize-1
   protected type X11Window (XS, YS : Interfaces.C.unsigned) is
      --  OpenWindow opens the Window as per the initialized XSize, YSize;
      procedure OpenWindow;
      --  CloseWindow closes the Window
      procedure CloseWindow;
      --  ProcessEvents processes any pending Events. NULL right now...
      procedure ProcessEvents;
      --  RedrawWindow redraws the content of the PixelMap into the Window
      procedure RedrawWindow;
      --  DrawPixel sets the (Xc,Yc) pixel in PixelMap to Colour and draws that Colour into (Xc-1,
      --  Yc-1) in the Window
      procedure DrawPixel (Xc, Yc : in Integer; Colour : in Integer);
   private
      --  all the local parameters of the protected object mostly typical X11 stuff
      XSize     : Interfaces.C.unsigned := XS;
      YSize     : Interfaces.C.unsigned := YS;
      PixelMap  : FrameBuffer (1 .. XS, 1 .. YS);
      GCon      : X.Xlib.GC;
      Screen    : Interfaces.C.int;
      Display   : aliased X.Xlib.XDisplay_access;
      Win       : aliased X.Window;
      GCon_Vals : aliased X.Xlib.XGCValues;
      Event     : aliased X.Xlib.XEvent;
   end X11Window;

end X11Windows;

The next sprint will focus on the development of the basic mathematic functions around vectors and matrices...

C-Ya,
Marinko
